name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# Security: Add explicit permissions following principle of least privilege
permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        go-version: ['1.22', '1.23', '1.24']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run vet
      run: go vet ./...

    - name: Run tests with coverage
      run: go test -race -coverprofile=coverage.out -covermode=atomic ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unit
        name: codecov-umbrella
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: true
        verbose: true

  lint:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Build CLI
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        if [ "$GOOS" = "windows" ]; then
          go build -o gorilla-cli-${{ matrix.goos }}-${{ matrix.goarch }}.exe ./cmd/gorilla-cli/
        else
          go build -o gorilla-cli-${{ matrix.goos }}-${{ matrix.goarch }} ./cmd/gorilla-cli/
        fi

    - name: Build examples
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        if [ "$GOOS" = "windows" ]; then
          go build -o usage-${{ matrix.goos }}-${{ matrix.goarch }}.exe ./examples/usage.go
        else
          go build -o usage-${{ matrix.goos }}-${{ matrix.goarch }} ./examples/usage.go
        fi

  benchmark:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write  # Required for upload-artifact
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Run benchmarks
      run: go test -bench=. -benchmem ./... | tee benchmark.txt

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark.txt

  integration:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Run integration tests with coverage
      run: go test -v -coverprofile=integration-coverage.out -covermode=atomic ./internal/dataframe -run "Integration"

    - name: Upload integration coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./integration-coverage.out
        flags: integration
        name: codecov-integration
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false
        verbose: true

    - name: Test CLI demo
      run: |
        go build -o gorilla-cli ./cmd/gorilla-cli/
        timeout 30s ./gorilla-cli -demo || true

    - name: Test usage example
      run: |
        timeout 30s go run ./examples/usage.go
